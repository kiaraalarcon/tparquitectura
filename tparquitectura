.data
slist: .word 0
cclist: .word 0
wclist: .word 0
schedv: .space 32
menu: .ascii "Colecciones de objetos categorizados\n"
.ascii "====================================\n"
.ascii "1-Nueva categoria\n"
.ascii "2-Siguiente categoria\n"
.ascii "3-Categoria anterior\n"
.ascii "4-Listar categorias\n"
.ascii "5-Borrar categoria actual\n"
.ascii "6-Anexar objeto a la categoria actual\n"
.ascii "7-Listar objetos de la categoria\n"
.ascii "8-Borrar objeto de la categoria\n"
.ascii "0-Salir\n"
.asciiz "Ingrese la opcion deseada: "
error: .asciiz "Error: "
return: .asciiz "\n"
catName: .asciiz "\nIngrese el nombre de una categoria: "
selCat: .asciiz "\nSe ha seleccionado la categoria:"
idObj: .asciiz "\nIngrese el ID del objeto a eliminar: "
objName: .asciiz "\nIngrese el nombre de un objeto: "
success: .asciiz "La operación se realizo con exito\n\n"

.text

main: 

	la $t0, schedv # inicializacion del vector
	la $t1, newcategory
	sw $t1, 0($t0)
	la $t1, nextcategory
	sw $t1, 4($t0)
	la $t1, prevcategory
	sw $t1, 8($t0)
	la $t1, listcategories
	sw $t1, 12($t0)
	la $t1, delcategory
	sw $t1, 16($t0)
	la $t1, newobject
	sw $t1, 20($t0)
	la $t1, listobject
	sw $t1, 24($t0)
	la $t1, delobject
	sw $t1, 28($t0)
	
	li $v0, 4            
    	la $a0, menu            # Syscall para imprimir texto
    	syscall                
    	
    	li $v0, 5                
   	syscall                 #Syscall para leer un número entero ingresado por el usuario
    	move $t2, $v0            
    	
    	beq $t2, 1, newcategory   
    	beq $t2, 2, nextcategory  
    	beq $t2, 3, prevcategory 
    	beq $t2, 4, listcategories  #Decisión en base a la opción ingresada
    	beq $t2, 5, delcategory 
    	beq $t2, 6, newobject   
    	beq $t2, 7, listobject  
    	beq $t2, 8, delobject    
    	beq $t2, 0, end  
    
    	li $v0, 4
    	la $a0, error
    	syscall
    	j main 	
   
end:  li $v0, 10             #Fin del programa 
      syscall    
                  
getblock:
    addiu $sp, $sp, -4      # Reservar espacio en la pila para guardar la dirección de retorno ($ra)
    sw $ra, 4($sp)          # Guardar la dirección de retorno en la pila
    
    li $v0, 4              
    syscall                #Imprime texto

    jal smalloc              # Llamar a la función smalloc para asignar memoria dinámica
    move $a0, $v0            

    li $a1, 16              
    li $v0, 8                # Syscall para leer una cadena ingresada por el usuario
    syscall                

    move $v0, $a0           
    
    lw $ra, 4($sp)           # Restaurar la dirección de retorno desde la pila 
    addiu $sp, $sp, 4        # Liberar el espacio reservado en la pila

    jr $ra                  
    
smalloc:                                
    lw $t0, slist           
    beqz $t0, sbrk           # Si $t0 es igual a cero, salta a la etiqueta 'sbrk'
    move $v0, $t0           
    lw $t0, 12($t0)         
    sw $t0, slist
    jr $ra                 

sbrk:                       
    li $a0, 16               
    li $v0, 9                # Syscall para pedir memoria dinámica (brk)
    syscall               
    jr $ra              
    
sfree:
    lw $t0, slist
    sw $t0, 12($a0)
    sw $a0, slist # $a0 node address in unused list
    jr $ra

newcategory:
    addiu $sp, $sp, -4           
    sw $ra, 4($sp)               
    la $a0, catName               
    jal getblock                  # Llamar a la función getblock 
    
    move $a2, $v0              

    la $a0, cclist              
    li $a1, 0                     # Establecer el valor de $a1 a NULL para indicar que es la primera categoría
    jal addnode                  
    
    lw $t0, wclist              
    bnez $t0, newcategory_end     # Si la lista de trabajo no es NULL, saltar a newcategory_end

    sw $v0, wclist                # Si la lista de trabajo es NULL, actualizarla con la nueva categoría
    
newcategory_end:
    li $v0, 0                   
    lw $ra, 4($sp)              
    addiu $sp, $sp, 4          
    j main                      # vuelvo a imprimir el menu
    
addnode:
    addi $sp, $sp, -8        
    sw $ra, 8($sp)          
    sw $a0, 4($sp)         
    
    jal smalloc              # Llamamos a smalloc para reservar espacio para el nuevo nodo
  
    sw $a2, 4($v0)           # Guardamos el contenido del nodo en la posición 4 del nuevo nodo
    sw $a1, 8($v0)           # Guardamos el puntero al objeto en la posición 8

    lw $a0, 4($sp)           

   
    lw $t0, ($a0)            # Cargamos la dirección del primer nodo de la lista en $t0
    beqz $t0, addnode_empty_list
    
addnode_to_end:
    lw $t1, ($t0)             # Cargamos la dirección del último nodo

    sw $t1, 0($v0)             # Actualizamos los punteros prev y next del nuevo nodo
    sw $t0, 12($v0)         
    
    sw $v0, 12($t1)        
    sw $v0, 0($t0)        # Actualizamos los punteros de los nodos anteriores para que apunten al nuevo nodo

    j addnode_exit

addnode_empty_list:
    sw $v0, ($a0)          
    sw $v0, 0($v0)        # Si la lista estaba vacía, insertamos el nuevo nodo como el primer nodo
    sw $v0, 12($v0)      
    
addnode_exit:
    lw $ra, 8($sp)       
    addi $sp, $sp, 8          # Restauramos el valor de retorno ($ra) y limpiamos la pila antes de regresar
    jr $ra                 

nextcategory:
    li $t0, 0
    lw $t0, wclist               
    beqz $t0, category_error_201   # Si no hay categorías, error 201 (No hay categorías)

    # Verificar si hay solo una categoría
    lw $t1, 12($t0)              
    lw $t2, 4($t1)
    lw $t3, 4($t0)
    beq $t2, $t3, category_error_202

    # Hay más de una categoría, pasar a la siguiente
    move $t0, $t1
    sw $t0, wclist                

    # Mostrar el nombre de la categoría seleccionada
    li $v0, 4
    la $a0, selCat
    syscall
    
    lw $a0, 4($t0)
    li $v0, 4
    syscall
    
    li $v0, 4
    la $a0, return
    syscall

    j main                      

category_error_201:
    # Si no hay categorías, error 201
    li $v0, 4
    la $a0, error
    syscall
    	
    li $v0, 1                     
    li $a0, 201                   
    syscall
    
    li $v0, 4
    la $a0, return
    syscall
    
    j main                       

category_error_202:
    # Si solo hay una categoría, error 202
    li $v0, 4
    la $a0, error
    syscall
    	
    li $v0, 1                     
    li $a0, 202                   
    syscall
    
    li $v0, 4
    la $a0, return
    syscall
    
    j main                       

prevcategory:
    li $t0, 0
    lw $t0, wclist               
    beqz $t0, category_error_201   # Si no hay categorías, error 201 (No hay categorías)

    # Verificar si hay solo una categoría
    lw $t1, 0($t0)             
    lw $t2, 4($t1)
    lw $t3, 4($t0)
    beq $t2, $t3, category_error_202

    # Hay más de una categoría, pasar a la siguiente
    move $t0, $t1
    sw $t0, wclist               

    # Mostrar el nombre de la categoría seleccionada
    li $v0, 4
    la $a0, selCat
    syscall

    lw $a0, 4($t0)
    li $v0, 4
    syscall
    
    li $v0, 4
    la $a0, return
    syscall

    j main                      

listcategories:

delcategory:

newobject:

listobject:

delobject:
